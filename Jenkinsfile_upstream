def color_map = [
    'SUCCESS': 'good',
    'FAILURE': 'danger',
    'ABORTED': 'warning',
]

def emoji_map = [
    'SUCCESS': 'white_check_mark',
    'FAILURE': 'x',
    'ABORTED': 'heavy_multiplication_x',
]

def slackChannel = getSlackChannel()

def getSlackChannel() {
    if (params.messageThread == null) {
        return "s_test"        
    } else {
        return params.messageThread
    }
}

def getBuildUser() {
    try {
        return "User: *${currentBuild.rawBuild.getCause(Cause.UserIdCause).getUserId()}*"
    } catch(Exception e) {
        return ""
    }
}


pipeline{
    agent any

//    options {
//        retry(1)
//    }

    parameters {
        booleanParam(name: 'RUN_TEST', defaultValue: true, description: 'Run golang test')
        choice(name: 'APP', choices: [
          'streampool',
          'packager',
        ], description: 'Choose APP deploy to')
        
    }

    stages{
        
//        stage('Run Downstream'){
//            steps{
//                script{
//                    sleep 3
//                    build job: "Setrix/Production/test/downstream"
//                }
//            }
//        }

        stage('Run test') {
            agent {
                docker { image 'golang:1.20-alpine' }
            }

            when {
                allOf {
                     expression { params.RUN_TEST }
                     expression { params.APP }
                }
            }

            steps {
                script {
                    sh "go version"
                    sh "go test ./microservices/${APP}/..."
                }
            }

        }


        stage('Done'){
            steps{
                script{
                    echo "Done upstream"
                    sh 'ls'
                }
            }
        }
    }

}
