def COLOR_MAP = [
    'SUCCESS': 'good',
    'FAILURE': 'danger',
    'ABORTED': 'warning',
]

def EMOJI_MAP = [
    'SUCCESS': 'white_check_mark',
    'FAILURE': 'x',
    'ABORTED': 'heavy_multiplication_x',
]

def slackChannel = 's_test'

def getBuildUser() {
    if (currentBuild.rawBuild.getCause(Cause.UserIdCause)) {
        return currentBuild.rawBuild.getCause(Cause.UserIdCause).getUserId()
    } else {
        return false
    }
}

pipeline{
    agent any

    stages{
        
        stage('Send slack notification') {
            steps {
                script {
                    slackNotify = slackSend(channel: "${slackChannel}", message: "Start Build")
                    messageTread = slackNotify.threadId
                    timestamp = slackNotify.ts
                }
            }
        }
        
        stage('Run Downstream'){
            steps{
                script{
                    echo "${getBuildUser()}"
                    echo "${messageTread}"
                    build job: "Setrix/Production/test/downstream", parameters: [
                        string(name: 'messageTread', value: messageTread)]

                }
            }
        }

        stage('Done upstream'){
            steps{
                script{
                    echo "Done upstream"
                }
            }
        }
    }

    post {
        always {
            script {
                EMOJI = EMOJI_MAP[currentBuild.currentResult]

                slackSend(channel: sageTread message: "Job is done", timestamp: timestamp, color: COLOR_MAP[currentBuild.currentResult])
                slackNotify.addReaction(EMOJI_MAP[currentBuild.currentResult])
            }
        }
    }
}
