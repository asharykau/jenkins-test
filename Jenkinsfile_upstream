def color_map = [
    'SUCCESS': 'good',
    'FAILURE': 'danger',
    'ABORTED': 'warning',
]

def emoji_map = [
    'SUCCESS': 'white_check_mark',
    'FAILURE': 'x',
    'ABORTED': 'heavy_multiplication_x',
]

def slackChannel = getSlackChannel()

def getSlackChannel() {
    if (params.messageThread == null) {
        return "s_test"        
    } else {
        return params.messageThread
    }
}

def getBuildUser() {
    try {
        return "User: *${currentBuild.rawBuild.getCause(Cause.UserIdCause).getUserId()}*"
    } catch(Exception e) {
        return ""
    }
}


pipeline{
    agent any

//    options {
//        retry(1)
//    }

    parameters {
        choice(name: 'APP', choices: [
          'streampool',
          'packager',
        ], description: 'Choose APP deploy to')
        booleanParam(name: 'RUN_TEST', defaultValue: true, description: 'Run test')
    }

    stages{
        

        stage('Run test') {
            steps {
                script {
                    buildParams = '--build-args TEST=123'
                    if (params.RUN_TEST) {
                        withCredentials([
                            string(credentialsId: 'RIXJOB_NS_DOMAIN', variable: 'RIXJOB_NS_DOMAIN'),
                            string(credentialsId: 'RIXJOB_NS_USER', variable: 'RIXJOB_NS_USER'),
                            string(credentialsId: 'RIXJOB_NS_KEY', variable: 'RIXJOB_NS_KEY'),
                            string(credentialsId: 'RIXJOB_NS_CPCODE', variable: 'RIXJOB_NS_CPCODE')
                        ]) {
                            env.DOCKER_BUILDKIT = '1'
                            docker.withRegistry('','dockerhub-push') {
                                def dockerImage = docker.build("123", "--build-arg NS_USER=${RIXJOB_NS_USER} --build-arg NS_DOMAIN=${RIXJOB_NS_DOMAIN} --build-arg NS_KEY=${RIXJOB_NS_KEY} --build-arg NS_CPCODE=${RIXJOB_NS_CPCODE} ${buildParams}")
                                docker.image("123").push()
                            }
                        }
                    } else {
                        docker.withRegistry('','dockerhub-push') {
                            def dockerImage = docker.build("123", buildParams)
                            dockerImage.push()
                        }
                    }
                }
            }
        }
    }

}
