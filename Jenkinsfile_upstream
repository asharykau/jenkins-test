def color_map = [
    'SUCCESS': 'good',
    'FAILURE': 'danger',
    'ABORTED': 'warning',
]

def emoji_map = [
    'SUCCESS': 'white_check_mark',
    'FAILURE': 'x',
    'ABORTED': 'heavy_multiplication_x',
]

def slackChannel = getSlackChannel()

def getSlackChannel() {
    if (params.messageThread == null) {
        return "s_test"        
    } else {
        return params.messageThread
    }
}

def getBuildUser() {
    try {
        return "User: *${currentBuild.rawBuild.getCause(Cause.UserIdCause).getUserId()}*"
    } catch(Exception e) {
        return ""
    }
}


pipeline{
    agent any

//    options {
//        retry(1)
//    }

    parameters {
        booleanParam(name: 'RUN_TEST', defaultValue: true, description: 'Run golang test')
        choice(name: 'APP', choices: [
          'streampool',
          'packager',
        ], description: 'Choose APP deploy to')
        booleanParam(name: 'RUN_TEST', defaultValue: true, description: 'Run test')
    }

    stages{
        

        stage('Run test') {
            steps {
                script {
                    buildParams = ''
                    if (params.RUN_TEST) {
                        withCredentials([
                            string(credentialsId: 'RIXJOB_NS_USER', variable: 'RIXJOB_NS_USER'),
                        ]) {
                            buildParams += " --build-arg NS_USER=${RIXJOB_NS_USER}"
                        }
                    }
                docker.withRegistry('','dockerhub-push') {
                    def dockerImage = docker.build("123", buildParams)
                    dockerImage.push()
                }
                }
            }
        }
    }

}
