def CLIENT_NAME = [
    'Select':[],
    'Cygnus':[  'instance':['cygnus-instance-1','cygnus-instance-2'],
                'app':['streampool']
             ],  
    'Camtel':[  'instance':['camtel-instance-1','camtel-instance-2'],
                'app':['streampool', 'packager']
             ],
    'Camtel2':[  'instance':['camtel2-instance-1','camtel2-instance-2'],
                'app':['streampool']
             ]
]

def deploy_container(client, host, app) {
    domain_name = "${host}-vpn.spnode.net"

    echo "deploy to ${domain_name}"
    echo "use config: setreampool/production/${client}/${host}/${app}/docker-compose.j2"
    
//    withCredentials([usernamePassword(credentialsId: 'dockerhub-deploy', passwordVariable: 'DOCKER_PASS', usernameVariable: 'DOCKER_USER')]) {
//        ansiblePlaybook (
//            playbook: 'container-redeploy.yml',
//            inventoryContent: domain_name,
//            extraVars: [
//                docker_user: "${DOCKER_USER}",
//                docker_pass: "${DOCKER_PASS}",
//                container_name: "${APPLICATION}",
//                docker_compose_template: "setreampool/production/${client}/${host}/${app}/docker-compose.j2"
//            ]
//        )   
//    }
}

properties([
    parameters([
        [$class: 'ChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select a CLIENT for deploy services',
            filterLength: 3,
            filterable: true,
            name: 'CLIENT',
            script: [$class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: true,
                    script: 'return ["ERROR"]'
                ],
                script:[
                    classpath: [],
                    sandbox: true,
                    script: """
                        def CLIENT_NAME = ${CLIENT_NAME.inspect()}
                        return CLIENT_NAME.keySet() as List
                    """
                ]
            ]
        ],
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_CHECKBOX',
            description: 'Select a INSTANCE',
            filterLength: 1,
            filterable: false,
            name: 'INSTANCE',
            referencedParameters: 'CLIENT',
            script: [$class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: true,
                    script: 'return ["ERROR"]'
                ],
                script: [
                    classpath: [],
                    sandbox: true,
                    script: """
                        switch(CLIENT) {
                          case ~/.*/:
                            def CLIENT_NAME = ${CLIENT_NAME.inspect()}
                            return  CLIENT_NAME[CLIENT].instance
                            break;
                          default:
                            return["ERROR"]
                        }
                    """.stripIndent()
                ]
            ]
        ],
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_CHECKBOX',
            description: 'Select a APPLICATION for deploy',
            filterLength: 1,
            filterable: false,
            name: 'APPLICATION',
            referencedParameters: 'CLIENT',
            script: [$class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: true,
                    script: 'return ["ERROR"]'
                ],
                script: [
                    classpath: [],
                    sandbox: true,
                    script: """
                        switch(CLIENT) {
                          case ~/.*/:
                            def CLIENT_NAME = ${CLIENT_NAME.inspect()}
                            return  CLIENT_NAME[CLIENT].app
                            break;
                          default:
                            return["ERROR"]
                        }
                    """.stripIndent()
                ]
            ]
        ]
    ])
])

pipeline{
    agent { label 'deploy' }

    stages{
        
        stage('Run Deploy'){
            steps{
                script{
                    echo "Start deploy service"
                    echo "Client: ${params.CLIENT}"
                    echo "Instances: ${params.INSTANCE}"
                    echo "Applications: ${params.APPLICATION}"

                    if (INSTANCE && APPLICATION) {
                        def instances = params.INSTANCE.split(",")                        
                        def applications = params.APPLICATION.split(",")  

                        echo "Deploy application for ${CLIENT}"

                        for (inst in instances) {
                            echo "Deploy application on ${inst}"
                            for (app in applications) {
                                echo "Deploy ${app} on ${inst}"
                                config = new File("/${WORKSPACE}/${CLIENT}/${inst}/${app}/docker-compose.j2")
                                if (config.isFile()) {
                                    deploy_container(CLIENT, inst, app)
                                } else {
                                    echo "Config not found: /${CLIENT}/${inst}/${app}/docker-compose.j2"
                                }
                            }
                        }
                    }
                }
            }
        }

    }

}
