def CLIENT_NAME = [
    'Select':[],
    'Cygnus':[  'instance':['cygnus-instance-1','cygnus-instance-2'],
                'app':['streampool']
             ],  
    'Camtel':[  'instance':['camtel-instance-1','camtel-instance-2'],
                'app':['streampool', 'packager']
             ],
    'Camtel2':[  'instance':['camtel2-instance-1','camtel2-instance-2'],
                'app':['streampool']
             ]
]


properties([
    parameters([
        [$class: 'ChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Select a CLIENT for deploy services',
            filterLength: 3,
            filterable: true,
            name: 'CLIENT',
            script: [$class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: true,
                    script: 'return ["ERROR"]'
                ],
                script:[
                    classpath: [],
                    sandbox: true,
                    script: """
                        def CLIENT_NAME = ${CLIENT_NAME.inspect()}
                        return CLIENT_NAME.keySet() as List
                    """
                ]
            ]
        ],
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_CHECKBOX',
            description: 'Select a INSTANCE',
            filterLength: 1,
            filterable: false,
            name: 'INSTANCE',
            referencedParameters: 'CLIENT',
            script: [$class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: true,
                    script: 'return ["ERROR"]'
                ],
                script: [
                    classpath: [],
                    sandbox: true,
                    script: """
                        switch(CLIENT) {
                          case ~/.*/:
                            def CLIENT_NAME = ${CLIENT_NAME.inspect()}
                            return  CLIENT_NAME[CLIENT].instance
                            break;
                          default:
                            return["ERROR"]
                        }
                    """.stripIndent()
                ]
            ]
        ],
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_CHECKBOX',
            description: 'Select a APPLICATION for deploy',
            filterLength: 1,
            filterable: false,
            name: 'APPLICATION',
            referencedParameters: 'CLIENT',
            script: [$class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: true,
                    script: 'return ["ERROR"]'
                ],
                script: [
                    classpath: [],
                    sandbox: true,
                    script: """
                        switch(CLIENT) {
                          case ~/.*/:
                            def CLIENT_NAME = ${CLIENT_NAME.inspect()}
                            return  CLIENT_NAME[CLIENT].app
                            break;
                          default:
                            return["ERROR"]
                        }
                    """.stripIndent()
                ]
            ]
        ]
    ])
])

pipeline{
    agent { label 'deploy' }

    stages{
        
        stage('Run Deploy'){
            steps{
                script{
                    echo "Start deploy service"
                    echo "Client: ${params.CLIENT}"
                    echo "Instances: ${params.INSTANCE}"
                    echo "Applications: ${params.APPLICATION}"

                    if (INSTANCE && APPLICATION) {
                        def instances = params.INSTANCE.split(",")                        
                        def applications = params.APPLICATION.split(",")  

                        for (inst in instances) {
                            for (app in applications) {
                                config = new File("${CLIENT}/${inst}/${app}")
                                println "Found config ${config.isDirectory()}"
                                echo "Deploy ${app} to ${inst}"
                            }
                        }
                    }
                }
            }
        }

    }

}
