def color_map = [
    'SUCCESS': 'good',
    'FAILURE': 'danger',
    'ABORTED': 'warning',
]

def emoji_map = [
    'SUCCESS': 'white_check_mark',
    'FAILURE': 'x',
    'ABORTED': 'heavy_multiplication_x',
]

def slackStartMessage = """
Info: Starting buld
${env.BUILD_URL}${getBuildUser()}
"""

def slackEndMessage = """
Info: Ended build
Status: *${currentBuild.currentResult}*
${env.BUILD_URL}${getBuildUser()}
"""

def slackChannel = getSlackChannel()

def getSlackChannel() {
    if (params.messageThread == null) {
        return "s_test"        
    } else {
        return params.messageThread
    }
}

def getBuildUser() {
    try {
        return "\nUser: *${currentBuild.rawBuild.getCause(Cause.UserIdCause).getUserId()}*"
    } catch(Exception e) {
        return ""
    }
}


pipeline{
    agent any

    stages{
        stage('Send slack notification') {
            steps {
                script {
                    echo "${slackChannel}"
                    echo "${params.messageThread}"
                    slackNotify = slackSend(channel: slackChannel, message: slackStartMessage)
                    slackChannel = slackNotify.threadId
                    timestamp = slackNotify.ts
                    echo "${params.messageThread}"
                }
            }
        }

        stage('Print user info'){
            steps{
                script{
                    echo "${getBuildUser()}"
                    echo "${slackChannel}"
                    sleep 3
                }
            }
        }

        stage('Done downsream'){
            steps{
                script{
                    echo "Done downstream"
                }
            }
        }
    }
    
    post {
        always {
            script {
                slackSend(channel: slackChannel, message: slackEndMessage, timestamp: timestamp, color: color_map[currentBuild.currentResult])
                slackNotify.addReaction(emoji_map[currentBuild.currentResult])
            }
        }
    }
}
