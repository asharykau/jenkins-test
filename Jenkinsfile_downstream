def COLOR_MAP = [
    'SUCCESS': 'good',
    'FAILURE': 'danger',
    'ABORTED': 'warning',
]

def EMOJI_MAP = [
    'SUCCESS': 'white_check_mark',
    'FAILURE': 'x',
    'ABORTED': 'heavy_multiplication_x',
]

def slackChannel = ''

def getBuildUser() {
    if (currentBuild.rawBuild.getCause(Cause.UserIdCause)) {
        return currentBuild.rawBuild.getCause(Cause.UserIdCause).getUserId()
    } else {
        for (cause in currentBuild.rawBuild.getCause(Cause.UpstreamCause).getUpstreamCauses()) {
            try {
                return cause.getUserId() + " caused from upstream"
            } catch(Exception e) {
                return "Scheduler"
            }
        }
    }
}

pipeline{
    agent any

    stages{
        stage('Print user info'){
            steps{
                script{
                    echo "${getBuildUser()}"
                    slackChannel = params.messageTread
                    echo "${slackChannel}"
                }
            }
        }

        stage('Done downsream'){
            steps{
                script{
                    echo "Done downstream"
                }
            }
        }
    }
    
    post {
        always {
            script {
                COLOR = COLOR_MAP[currentBuild.currentResult]

                slackSend(channel: slackChannel, message: "from downstream", color: COLOR_MAP[currentBuild.currentResult])
            }
        }
    }
}
